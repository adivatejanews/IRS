/**
 * Generated by Gas3 v2.1.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (Vaccination.as).
 */

package org.hil.core.model {

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import org.granite.meta;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;

    [Managed]
    public class VaccinationBase extends AbstractEntity {

        private var _age:Number;
        private var _ageUnit:Number;
        private var _dependentVaccination:Vaccination;
        private var _gap:Number;
        private var _limitDays:Number;
        private var _name:String;
        private var _notes:String;

        public function set age(value:Number):void {
            _age = value;
        }
        public function get age():Number {
            return _age;
        }

        public function set ageUnit(value:Number):void {
            _ageUnit = value;
        }
        public function get ageUnit():Number {
            return _ageUnit;
        }

        public function set dependentVaccination(value:Vaccination):void {
            _dependentVaccination = value;
        }
        public function get dependentVaccination():Vaccination {
            return _dependentVaccination;
        }

        public function set gap(value:Number):void {
            _gap = value;
        }
        public function get gap():Number {
            return _gap;
        }

        public function set limitDays(value:Number):void {
            _limitDays = value;
        }
        public function get limitDays():Number {
            return _limitDays;
        }

        public function set name(value:String):void {
            _name = value;
        }
        public function get name():String {
            return _name;
        }

        public function set notes(value:String):void {
            _notes = value;
        }
        public function get notes():String {
            return _notes;
        }

        override meta function merge(em:IEntityManager, obj:*):void {
            var src:VaccinationBase = VaccinationBase(obj);
            super.meta::merge(em, obj);
            if (meta::isInitialized()) {
               em.meta_mergeExternal(src._age, _age, null, this, 'age', function setter(o:*):void{_age = o as Number}, false);
               em.meta_mergeExternal(src._ageUnit, _ageUnit, null, this, 'ageUnit', function setter(o:*):void{_ageUnit = o as Number}, false);
               em.meta_mergeExternal(src._dependentVaccination, _dependentVaccination, null, this, 'dependentVaccination', function setter(o:*):void{_dependentVaccination = o as Vaccination}, false);
               em.meta_mergeExternal(src._gap, _gap, null, this, 'gap', function setter(o:*):void{_gap = o as Number}, false);
               em.meta_mergeExternal(src._limitDays, _limitDays, null, this, 'limitDays', function setter(o:*):void{_limitDays = o as Number}, false);
               em.meta_mergeExternal(src._name, _name, null, this, 'name', function setter(o:*):void{_name = o as String}, false);
               em.meta_mergeExternal(src._notes, _notes, null, this, 'notes', function setter(o:*):void{_notes = o as String}, false);
            }
        }

        override public function readExternal(input:IDataInput):void {
            super.readExternal(input);
            if (meta::isInitialized()) {
                _age = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _ageUnit = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _dependentVaccination = input.readObject() as Vaccination;
                _gap = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _limitDays = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _name = input.readObject() as String;
                _notes = input.readObject() as String;
            }
        }

        override public function writeExternal(output:IDataOutput):void {
            super.writeExternal(output);
            if (meta::isInitialized()) {
                output.writeObject((_age is IPropertyHolder) ? IPropertyHolder(_age).object : _age);
                output.writeObject((_ageUnit is IPropertyHolder) ? IPropertyHolder(_ageUnit).object : _ageUnit);
                output.writeObject((_dependentVaccination is IPropertyHolder) ? IPropertyHolder(_dependentVaccination).object : _dependentVaccination);
                output.writeObject((_gap is IPropertyHolder) ? IPropertyHolder(_gap).object : _gap);
                output.writeObject((_limitDays is IPropertyHolder) ? IPropertyHolder(_limitDays).object : _limitDays);
                output.writeObject((_name is IPropertyHolder) ? IPropertyHolder(_name).object : _name);
                output.writeObject((_notes is IPropertyHolder) ? IPropertyHolder(_notes).object : _notes);
            }
        }
    }
}
