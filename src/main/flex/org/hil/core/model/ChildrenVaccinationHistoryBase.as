/**
 * Generated by Gas3 v2.1.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (ChildrenVaccinationHistory.as).
 */

package org.hil.core.model {

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import org.granite.meta;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;

    [Managed]
    public class ChildrenVaccinationHistoryBase extends AbstractEntity {

        private var _child:Children;
        private var _createdTime:Date;
        private var _dateOfImmunization:Date;
        private var _fromMobile:Boolean;
        private var _modifiedTime:Date;
        private var _otherLocation:String;
        private var _otherVaccinatedLocation:Number;
        private var _overdue:Boolean;
        private var _reactionStatus:Number;
        private var _reasonIfMissed:String;
        private var _vaccinated:Number;
        private var _vaccinatedLocation:Commune;
        private var _vaccination:Vaccination;

        public function set child(value:Children):void {
            _child = value;
        }
        public function get child():Children {
            return _child;
        }

        public function set createdTime(value:Date):void {
            _createdTime = value;
        }
        public function get createdTime():Date {
            return _createdTime;
        }

        public function set dateOfImmunization(value:Date):void {
            _dateOfImmunization = value;
        }
        public function get dateOfImmunization():Date {
            return _dateOfImmunization;
        }

        public function set fromMobile(value:Boolean):void {
            _fromMobile = value;
        }
        public function get fromMobile():Boolean {
            return _fromMobile;
        }

        public function set modifiedTime(value:Date):void {
            _modifiedTime = value;
        }
        public function get modifiedTime():Date {
            return _modifiedTime;
        }

        public function set otherLocation(value:String):void {
            _otherLocation = value;
        }
        public function get otherLocation():String {
            return _otherLocation;
        }

        public function set otherVaccinatedLocation(value:Number):void {
            _otherVaccinatedLocation = value;
        }
        public function get otherVaccinatedLocation():Number {
            return _otherVaccinatedLocation;
        }

        public function set overdue(value:Boolean):void {
            _overdue = value;
        }
        public function get overdue():Boolean {
            return _overdue;
        }

        public function set reactionStatus(value:Number):void {
            _reactionStatus = value;
        }
        public function get reactionStatus():Number {
            return _reactionStatus;
        }

        public function set reasonIfMissed(value:String):void {
            _reasonIfMissed = value;
        }
        public function get reasonIfMissed():String {
            return _reasonIfMissed;
        }

        public function set vaccinated(value:Number):void {
            _vaccinated = value;
        }
        public function get vaccinated():Number {
            return _vaccinated;
        }

        public function set vaccinatedLocation(value:Commune):void {
            _vaccinatedLocation = value;
        }
        public function get vaccinatedLocation():Commune {
            return _vaccinatedLocation;
        }

        public function set vaccination(value:Vaccination):void {
            _vaccination = value;
        }
        public function get vaccination():Vaccination {
            return _vaccination;
        }

        override meta function merge(em:IEntityManager, obj:*):void {
            var src:ChildrenVaccinationHistoryBase = ChildrenVaccinationHistoryBase(obj);
            super.meta::merge(em, obj);
            if (meta::isInitialized()) {
               em.meta_mergeExternal(src._child, _child, null, this, 'child', function setter(o:*):void{_child = o as Children}, false);
               em.meta_mergeExternal(src._createdTime, _createdTime, null, this, 'createdTime', function setter(o:*):void{_createdTime = o as Date}, false);
               em.meta_mergeExternal(src._dateOfImmunization, _dateOfImmunization, null, this, 'dateOfImmunization', function setter(o:*):void{_dateOfImmunization = o as Date}, false);
               em.meta_mergeExternal(src._fromMobile, _fromMobile, null, this, 'fromMobile', function setter(o:*):void{_fromMobile = o as Boolean}, false);
               em.meta_mergeExternal(src._modifiedTime, _modifiedTime, null, this, 'modifiedTime', function setter(o:*):void{_modifiedTime = o as Date}, false);
               em.meta_mergeExternal(src._otherLocation, _otherLocation, null, this, 'otherLocation', function setter(o:*):void{_otherLocation = o as String}, false);
               em.meta_mergeExternal(src._otherVaccinatedLocation, _otherVaccinatedLocation, null, this, 'otherVaccinatedLocation', function setter(o:*):void{_otherVaccinatedLocation = o as Number}, false);
               em.meta_mergeExternal(src._overdue, _overdue, null, this, 'overdue', function setter(o:*):void{_overdue = o as Boolean}, false);
               em.meta_mergeExternal(src._reactionStatus, _reactionStatus, null, this, 'reactionStatus', function setter(o:*):void{_reactionStatus = o as Number}, false);
               em.meta_mergeExternal(src._reasonIfMissed, _reasonIfMissed, null, this, 'reasonIfMissed', function setter(o:*):void{_reasonIfMissed = o as String}, false);
               em.meta_mergeExternal(src._vaccinated, _vaccinated, null, this, 'vaccinated', function setter(o:*):void{_vaccinated = o as Number}, false);
               em.meta_mergeExternal(src._vaccinatedLocation, _vaccinatedLocation, null, this, 'vaccinatedLocation', function setter(o:*):void{_vaccinatedLocation = o as Commune}, false);
               em.meta_mergeExternal(src._vaccination, _vaccination, null, this, 'vaccination', function setter(o:*):void{_vaccination = o as Vaccination}, false);
            }
        }

        override public function readExternal(input:IDataInput):void {
            super.readExternal(input);
            if (meta::isInitialized()) {
                _child = input.readObject() as Children;
                _createdTime = input.readObject() as Date;
                _dateOfImmunization = input.readObject() as Date;
                _fromMobile = input.readObject() as Boolean;
                _modifiedTime = input.readObject() as Date;
                _otherLocation = input.readObject() as String;
                _otherVaccinatedLocation = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _overdue = input.readObject() as Boolean;
                _reactionStatus = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _reasonIfMissed = input.readObject() as String;
                _vaccinated = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _vaccinatedLocation = input.readObject() as Commune;
                _vaccination = input.readObject() as Vaccination;
            }
        }

        override public function writeExternal(output:IDataOutput):void {
            super.writeExternal(output);
            if (meta::isInitialized()) {
                output.writeObject((_child is IPropertyHolder) ? IPropertyHolder(_child).object : _child);
                output.writeObject((_createdTime is IPropertyHolder) ? IPropertyHolder(_createdTime).object : _createdTime);
                output.writeObject((_dateOfImmunization is IPropertyHolder) ? IPropertyHolder(_dateOfImmunization).object : _dateOfImmunization);
                output.writeObject((_fromMobile is IPropertyHolder) ? IPropertyHolder(_fromMobile).object : _fromMobile);
                output.writeObject((_modifiedTime is IPropertyHolder) ? IPropertyHolder(_modifiedTime).object : _modifiedTime);
                output.writeObject((_otherLocation is IPropertyHolder) ? IPropertyHolder(_otherLocation).object : _otherLocation);
                output.writeObject((_otherVaccinatedLocation is IPropertyHolder) ? IPropertyHolder(_otherVaccinatedLocation).object : _otherVaccinatedLocation);
                output.writeObject((_overdue is IPropertyHolder) ? IPropertyHolder(_overdue).object : _overdue);
                output.writeObject((_reactionStatus is IPropertyHolder) ? IPropertyHolder(_reactionStatus).object : _reactionStatus);
                output.writeObject((_reasonIfMissed is IPropertyHolder) ? IPropertyHolder(_reasonIfMissed).object : _reasonIfMissed);
                output.writeObject((_vaccinated is IPropertyHolder) ? IPropertyHolder(_vaccinated).object : _vaccinated);
                output.writeObject((_vaccinatedLocation is IPropertyHolder) ? IPropertyHolder(_vaccinatedLocation).object : _vaccinatedLocation);
                output.writeObject((_vaccination is IPropertyHolder) ? IPropertyHolder(_vaccination).object : _vaccination);
            }
        }
    }
}
